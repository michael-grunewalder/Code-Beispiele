<?php

namespace App\Filament\Resources;

use App\Filament\Resources\SsoUserResource\Pages;
use App\Filament\Resources\SsoUserResource\RelationManagers;
use App\Models\Filament\SsoUser;
use Closure;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;

function _($string)
{
    return $string;
}

class SsoUserResource extends Resource
{
    protected static ?string $model = SsoUser::class;
    protected static ?string $navigationGroup   =   'Benutzerverwaltung';
    protected static ?int $navigationSort = 10;


    //protected static ?string $navigationIcon = 'heroicon-o-user';


    public static function getLabel(): ?string
    {
        return _('Benutzerkonto'); // TODO: Change the autogenerated stub
    }

    public static function getPluralLabel(): ?string
    {
        return _('Benutzerkonten'); // TODO: Change the autogenerated stub
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make()->schema([
                Forms\Components\TextInput::make('firstName')->label(__('Vorname'))->required(),
                Forms\Components\TextInput::make('lastName')->label(__('Vorname'))->required(),
                Forms\Components\TextInput::make('email')->label(__('E-Mail'))->required()->email()->rules([
                    function () {
                        return function (string $attribute, $value, Closure $fail) {
                            $existing = SsoUser::where('email',$value)->first();
                            if ($existing) {
                                $fail('Ein Benutzer mit dieser E-Mail Adresse existiert bereits');
                            }
                        };
                    },
                ]),
                Forms\Components\TextInput::make('password')->label(__('Passwort'))->required()->password()->confirmed(true),
                Forms\Components\TextInput::make('password_confirmation')->label(__('Password bestÃ¤tigen'))->required()->password(),
                ])
            ]);
    }

    public static function table(Table $table): Table
    {
        $firmaId = auth()->user()->firma_id;
        return $table
            ->query(SsoUser::query()->where('firma_id', $firmaId))
            ->columns([
                Tables\Columns\TextColumn::make('lastName')->label(__('Nachname'))->sortable()->searchable(),
                Tables\Columns\TextColumn::make('firstName')->label_(_('Vorname'))->sortable()->searchable(),
                Tables\Columns\TextColumn::make('email')->label(__('e-Mail'))->sortable()->searchable()
            ])
            ->defaultSort('lastName', 'ssc')
            ->filters([
                //
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListSsoUsers::route('/'),
            'create' => Pages\CreateSsoUser::route('/create'),
            'edit' => Pages\EditSsoUser::route('/{record}/edit'),
        ];
    }
}
